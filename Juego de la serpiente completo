# Declaramos las librerías 
import pygame
import random

# Inicializar pygame
pygame.init()

# Colores
blanco = (255, 255, 255)
amarillo = (255, 255, 102)
negro = (0, 0, 0)
rojo = (213, 50, 80)
verde = (0, 255, 0)
azul = (50, 153, 213)

# Dimensiones de la ventana
ancho = 600
alto = 300

# Tamaño del bloque y velocidad
bloque = 10
velocidad = 15

# Fuente
fuente = pygame.font.SysFont("bahnschrift", 25)
fuente_grande = pygame.font.SysFont("bahnschrift", 40)

# Ventana
pantalla = pygame.display.set_mode((ancho, alto))
pygame.display.set_caption("Serpiente")

# Reloj
reloj = pygame.time.Clock()


# Funciones del juego
def puntos(puntaje):
    valor = fuente.render(f"Puntos: {puntaje}", True, amarillo)
    pantalla.blit(valor, [0, 0])

# Función para dibujar la serpiente
def nuestra_serpiente(bloque, lista_serpiente):
    for x in lista_serpiente:
        pygame.draw.rect(pantalla, negro, [x[0], x[1], bloque, bloque])

# Configurando el mensaje que saldra en la pantalla
def mensaje(texto, color, y, font=None):
    if not font:
        font = fuente
    render_texto = font.render(texto, True, color)
    rect = render_texto.get_rect(center=(ancho // 2, y))
    pantalla.blit(render_texto, rect)

# Mensajes de instrucciones del juego 
def menu():
    en_menu = True
    while en_menu: 
        pantalla.fill(azul)
        
        mensaje("Serpiente", blanco, alto // 4, fuente_grande)
        mensaje("Presiona ENTER para empezar", amarillo, alto // 2)
        mensaje("Presiona Q para salir", rojo, alto // 2 + 40)
        
        pygame.display.update()
        
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                pygame.quit()
                quit()
            if evento.type == pygame.KEYDOWN:
                if evento.key == pygame.K_RETURN:  # Enter para iniciar el juego
                    en_menu = False
                    juego()
                if evento.key == pygame.K_q: # Q para salir
                    pygame.quit()
                    quit()

# Mensajes de instrucciones del juego al perder
def mensaje_perder(puntaje):
    esperando = True
    while esperando: # Bucle para esperar la acción del usuario
        pantalla.fill(azul)
        mensaje("¡Perdiste!", rojo, alto // 2 - 60, fuente_grande)
        mensaje(f"Puntos: {puntaje}", amarillo, alto // 2 - 20)
        mensaje("R - Reiniciar", amarillo, alto // 2 + 40)
        mensaje("M - Volver al menú", amarillo, alto // 2 + 80)
        mensaje("ESC - Salir del juego", amarillo, alto // 2 + 120)

        pygame.display.flip()
        # Manejo de eventos
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                pygame.quit()
                quit()
            if evento.type == pygame.KEYDOWN:
                if evento.key == pygame.K_ESCAPE:  # Salir
                    pygame.quit()
                    quit()
                elif evento.key == pygame.K_r:  # Reiniciar
                    esperando = False
                    juego()
                elif evento.key == pygame.K_m:  # Volver al menú
                    esperando = False
                    menu()

# Inicia el juego
def juego():
    game_over = False

    x1 = ancho / 2
    y1 = alto / 2

    x1_cambio = 0
    y1_cambio = 0

    lista_serpiente = []
    largo_serpiente = 1
    # Posición inicial de la comida
    comida_x = round(random.randrange(0, ancho - bloque) / bloque) * bloque
    comida_y = round(random.randrange(0, alto - bloque) / bloque) * bloque
    # Bucle principal del juego
    while not game_over:
        for evento in pygame.event.get():
            if evento.type == pygame.QUIT:
                game_over = True
            if evento.type == pygame.KEYDOWN:
                if evento.key == pygame.K_LEFT and x1_cambio != bloque:
                    x1_cambio = -bloque
                    y1_cambio = 0
                elif evento.key == pygame.K_RIGHT and x1_cambio != -bloque:
                    x1_cambio = bloque
                    y1_cambio = 0
                elif evento.key == pygame.K_UP and y1_cambio != bloque:
                    y1_cambio = -bloque
                    x1_cambio = 0
                elif evento.key == pygame.K_DOWN and y1_cambio != -bloque:
                    y1_cambio = bloque
                    x1_cambio = 0
        # Verifica si la serpiente se sale de los límites
        if x1 >= ancho or x1 < 0 or y1 >= alto or y1 < 0:
            mensaje_perder(largo_serpiente - 1)
            return

        x1 += x1_cambio
        y1 += y1_cambio
        pantalla.fill(azul)
        pygame.draw.rect(pantalla, verde, [comida_x, comida_y, bloque, bloque])
        cabeza = [x1, y1]
        lista_serpiente.append(cabeza)
        # Mantiene el tamaño de la serpiente
        if len(lista_serpiente) > largo_serpiente:
            del lista_serpiente[0]
        # Verifica si la serpiente se choca a sí misma
        for x in lista_serpiente[:-1]:
            if x == cabeza:
                mensaje_perder(largo_serpiente - 1)
                return

        nuestra_serpiente(bloque, lista_serpiente)
        puntos(largo_serpiente - 1)
        # Actualiza la pantalla
        pygame.display.update()
        # Verifica si la serpiente come la comida
        if x1 == comida_x and y1 == comida_y:
            comida_x = round(random.randrange(0, ancho - bloque) / bloque) * bloque
            comida_y = round(random.randrange(0, alto - bloque) / bloque) * bloque
            largo_serpiente += 1

        reloj.tick(velocidad)
    # Finaliza el juego
    pygame.quit()
    quit()


# Inicia el juego mostrando el menú
menu()